==========================================
🎯 Malhaebom 팀 프로젝트 - 현재 상태 및 사용법
==========================================

📅 작성일: 2025년 9월 1일
📁 프로젝트 위치: C:\TEST_TEAM_VER\Malhaebom_team_project

🔧 주요 변경사항 (기존 대비)
==========================================

1. **오디오 파일 처리 개선**
   - 기존: .wav 파일만 지원
   - 현재: .wav, .mp3, .m4a, .webm, .ogg 등 다양한 형식 지원
   - torchaudio 실패 시 librosa로 자동 fallback

2. **점수 계산 시스템 수정**
   - 기존: 모든 질문의 점수를 합산하여 총점 계산
   - 현재: 각 질문의 점수를 평균으로 계산하여 40점 만점 유지
   - 짧은 답변(5글자 미만) 또는 짧은 오디오(3초 미만)는 0점 처리

3. **UI/UX 개선**
   - 기존: 단순한 텍스트 형태의 결과 표시
   - 현재: ResultExam.jsx와 유사한 카드 형태의 아름다운 결과 표시
   - 그라데이션 배경, 점수 카드, 만점 표시 등

4. **녹음 기능 개선**
   - 기존: 수동으로 분석 버튼 클릭 필요
   - 현재: 녹음 완료 후 자동으로 분석 실행 (1초 후)
   - 분석하기 버튼과 다음 질문 버튼을 동시에 제공

5. **데이터베이스 정리**
   - 기존: 테스트 데이터가 누적되어 있음
   - 현재: 깨끗하게 정리된 상태

🚀 서버 실행 방법 순서에 맞게 켜주세요. 
==========================================

1. **분석 서버 (8000 포트)**
   ```bash
   cd "08.X_X"
   python MAIN.py
   ```
   - 형태소 분석기 및 임베딩 모델 로드
   - 인터뷰 질문 JSON 파일 로드
   - 음성 분석 및 점수 계산

   uvicorn MAIN:app --host 127.0.0.1 --port 8000 --log-level debug

2. **게이트웨이 서버 (4000 포트)**
   ```bash
   cd "08.X_X"
   uvicorn gateway:app --host 0.0.0.0 --port 4000 --reload
   ```
   - Whisper 모델을 사용한 STT (음성-텍스트 변환)
   - 오디오 파일 처리 및 분석 서버와 연동
   - 인터뷰 결과 저장 및 조회

3. **웹 클라이언트 (5173 포트)**
   ```bash
   cd "02. web/malhaebom"
   npm run dev
   ```
   - React 기반 웹 애플리케이션
   - 사용자 인터페이스 제공

flutter run \
  --dart-define=USE_SERVER=true \
  --dart-define=API_BASE=http://(PC IP 주소):4000

📱 인터뷰 페이지 특징
==========================================

1. **메인 기능**
   - 실시간 음성 녹음 및 재생
   - 자동 음성-텍스트 변환
   - 6개 항목에 대한 자동 점수 평가
   - 질문별 진행 상황 표시

2. **평가 항목 (총 40점)**
   - 반응 시간 (4점): 질문 제시 후 답변 시작까지의 시간
   - 반복어 비율 (4점): 답변에서 반복되는 단어의 비율
   - 평균 문장 길이 (4점): 답변의 문장 길이 적절성
   - 화행 적절성 (12점): 질문과 답변의 의미적 연관성
   - 회상성 (8점): 기억을 되살리는 답변의 적절성
   - 문법 완성도 (8점): 답변의 문법적 정확성

3. **사용자 경험**
   - 녹음 버튼 클릭 시 자동으로 마이크 권한 요청
   - 녹음 완료 후 자동 분석 실행
   - 분석 결과를 시각적으로 아름답게 표시
   - 분석 없이도 다음 질문으로 진행 가능
   - 음성 파일 자동 다운로드 없음

4. **결과 표시**
   - 총점을 큰 숫자로 강조 표시
   - 각 항목별 점수를 카드 형태로 표시
   - 각 항목의 만점 정보 제공
   - 다음 질문 또는 인터뷰 완료 버튼

5. **데이터 관리**
   - 인터뷰 완료 시 자동으로 결과 저장
   - 인터뷰 기록 페이지에서 이전 결과 조회
   - 각 질문별 상세 점수 확인 가능

🔍 현재 파일 구조
==========================================

08.X_X/
├── MAIN.py              # 분석 서버 (8000 포트)
├── gateway.py           # 게이트웨이 서버 (4000 포트)
├── analyzer.py          # 점수 계산 로직
├── interview_results.json # 인터뷰 결과 데이터베이스
└── 현재_상태_및_사용법.txt # 이 파일

02. web/malhaebom/
├── src/pages/Interview/
│   ├── InterviewStart.jsx    # 메인 인터뷰 페이지
│   └── InterviewHistory.jsx  # 인터뷰 기록 페이지
└── src/App.jsx               # 라우팅 설정

⚠️ 주의사항
==========================================

1. **서버 실행 순서**
   - 분석 서버 → 게이트웨이 서버 → 웹 클라이언트 순서로 실행
   - 모든 서버가 실행되어야 인터뷰 기능 정상 작동

2. **마이크 권한**
   - 브라우저에서 마이크 권한을 허용해야 함
   - HTTPS 환경에서만 마이크 접근 가능

3. **오디오 형식**
   - 브라우저가 지원하는 최적의 오디오 형식으로 자동 선택
   - 대부분의 현대 브라우저에서 지원

4. **점수 계산**
   - 답변이 너무 짧거나 오디오가 너무 짧으면 0점
   - 각 질문의 점수를 평균으로 계산하여 40점 만점 유지

🎉 사용법 요약
==========================================

1. 서버들을 순서대로 실행
2. 웹 브라우저에서 http://localhost:5173 접속
3. "인지 능력 검사" → "시작하기" 클릭
4. 녹음 버튼으로 음성 녹음 시작
5. 정지 버튼으로 녹음 완료 (자동 분석 실행)
6. 분석 결과 확인 후 다음 질문 진행
7. 모든 질문 완료 시 결과 페이지로 이동
8. "기록보기"에서 이전 인터뷰 결과 확인

이제 깔끔하게 정리된 상태에서 인터뷰 기능을 사용할 수 있습니다! 🚀
