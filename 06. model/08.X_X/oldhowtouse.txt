음성 기반 인지 능력 분석 시스템: 기술 명세서
1. 시스템 개요
본 시스템은 어르신, 특히 부산/경상도 방언 사용자의 음성 답변을 기반으로 인지 능력을 다각적으로 분석하고 점수화하는 것을 목표로 하는 AI 파이프라인 시스템입니다. 사용자의 음성 녹음 파일 하나를 입력받아, STT(음성 텍스트 변환), 사투리 번역, 자연어 이해(NLU) 등의 과정을 거쳐 최종 인지 분석 점수를 산출합니다.

전체 작업 흐름 (Pipeline)
시스템은 다음과 같은 4개의 독립적인 마이크로서비스가 순차적으로 상호작용하며 동작합니다.

클라이언트 (Flutter 앱): 사용자의 음성을 녹음하고, 관련 데이터(질문 내용, 응답 시간 등)와 함께 게이트웨이 서버로 전송합니다.

게이트웨이 서버: 전체 파이프라인을 총괄하는 지휘자 역할을 합니다.

STT 서버: 음성 파일을 받아 사투리가 포함된 텍스트로 변환합니다.

번역 서버: STT로 변환된 사투리 텍스트를 표준어로 번역합니다.

분석 서버: 번역된 표준어 텍스트와 데이터를 기반으로 6가지 인지 지표를 분석하고 점수를 산출합니다.

2. 시스템 작동 방법 (개발자용 가이드)
이 시스템을 로컬 개발 환경에서 실행하기 위한 단계별 가이드입니다.

사전 준비사항
Docker Desktop: 설치 및 실행되어 있어야 합니다.

Python: 3.9 이상 버전이 설치되어 있어야 합니다.

NIA 방언 모델 파일: dialect.stt.kyeongsang.tar와 dialect-nmt-gyeongsang.tar 파일이 준비되어 있어야 합니다.

프로젝트 코드: gateway.py, MAIN.py, analyzer.py, custom_spell_checker.py 파일이 모두 한 폴더에 있어야 합니다.

서버 실행 순서
총 4개의 터미널(PowerShell 또는 cmd) 창이 필요하며, 각 창에서 아래 명령어를 순서대로 실행합니다.

[터미널 1] STT 서버 실행:

NIA STT 모델을 도커에 로드한 후, 아래 명령어로 서버를 실행합니다.

# (최초 1회) docker load -i .\dialect.stt.kyeongsang.tar
docker run --rm -itd -p 4044:4044 --name gyeongsang-stt-server dialect.stt.kyeongsang:1.0.0 --port=4044

[터미널 2] 번역 서버 실행:

NIA 번역 모델을 도커에 로드한 후, 아래 명령어로 서버를 실행합니다.

# (최초 1회) docker load -i .\dialect-nmt-gyeongsang.tar
docker run --rm -itd -p 7777:7777 --name gyeongsang-translation-server saltlux/dialect-nmt-gyeongsang:1.0.0

[터미널 3] 분석 서버 실행:

프로젝트 폴더로 이동하여 필요한 라이브러리를 설치한 뒤, 아래 명령어로 서버를 실행합니다.

# (최초 1회) pip install uvicorn fastapi python-multipart sentence-transformers scikit-learn konlpy kss requests
uvicorn MAIN:app --reload --host 0.0.0.0 --port 8000

주의: 최초 실행 시 AI 모델 예열(initialize_model) 과정으로 인해 Application startup complete. 메시지가 뜨기까지 몇 분 정도 소요될 수 있습니다.

[터미널 4] 게이트웨이 서버 실행:

프로젝트 폴더로 이동하여 아래 명령어로 서버를 실행합니다.

uvicorn gateway:app --reload --port 8081

테스트 방법
모든 서버가 정상적으로 실행된 것을 각 터미널에서 확인합니다.

웹 브라우저에서 게이트웨이 서버의 테스트 페이지 주소 http://127.0.0.1:8081/docs 로 접속합니다.

/process-audio 엔드포인트를 열고 Try it out을 클릭합니다.

테스트할 .wav 음성 파일과 question_text, response_time, audio_duration 값을 입력한 후 Execute 버튼을 누르면 전체 파이프라인이 동작하고 최종 결과를 확인할 수 있습니다.

3. 기술적 특징 및 아키텍처
마이크로서비스 아키텍처 (Microservices Architecture):
각 기능(STT, 번역, 분석)을 독립된 서버로 분리하여 개발, 수정, 배포가 용이합니다. 특정 기능에 문제가 발생해도 전체 시스템이 멈추지 않으며, 필요에 따라 특정 서비스만 확장할 수 있습니다.

비용 효율적인 AI 분석 엔진:
핵심 인지 분석 로직은 외부 유료 API에 의존하지 않습니다. 로컬에서 실행되는 오픈소스 경량 AI 모델(jhgan/ko-sroberta-multitask)을 사용하여 문장 간의 의미적 유사도를 계산함으로써, API 비용 없이도 높은 수준의 의미 분석을 수행합니다.

비동기 API 서버 (FastAPI):
모든 파이썬 기반 서버(분석, 게이트웨이)는 현대적인 고성능 웹 프레임워크인 FastAPI로 구축되었습니다. 비동기 처리를 통해 여러 요청을 효율적으로 동시에 처리할 수 있어 빠른 응답 속도를 보장합니다.

AI 모델 예열 (Pre-warming):
분석 서버(MAIN.py)는 lifespan 기능을 사용하여 서버가 시작될 때 AI 모델을 미리 메모리에 로드합니다. 이 '예열' 과정을 통해, 실제 첫 요청이 들어왔을 때 모델 로딩으로 인한 긴 지연(타임아웃) 없이 즉각적으로 응답할 수 있습니다. 이는 특히 CPU 환경에서 안정적인 서비스 운영을 위해 필수적입니다.

4. 코드 역할 상세 설명
gateway.py (총괄 매니저 - The Conductor)
역할: 전체 파이프라인의 지휘자이자 외부와의 유일한 소통 창구입니다.

주요 기능:

Flutter 앱으로부터 음성 파일(UploadFile)과 폼 데이터(Form)를 받는 /process-audio API 엔드포인트를 제공합니다.

STT, 번역, 분석 서버에 순차적으로 requests 라이브러리를 사용하여 HTTP 요청을 보냅니다.

각 단계에서 받은 결과를 다음 단계의 입력으로 전달합니다.

모든 과정이 끝나면, 최종 분석 결과를 취합하여 Flutter 앱에 JSON 형태로 응답합니다.

MAIN.py (분석 전문가 - The Analyst)
역할: 인지 분석 알고리즘을 외부에서 사용할 수 있도록 API 형태로 제공하는 서버입니다.

주요 기능:

analyzer.py의 핵심 분석 로직을 호출하는 /analyze API 엔드포인트를 제공합니다.

서버 시작 시 lifespan 이벤트를 통해 analyzer.initialize_model() 함수를 호출하여 AI 모델을 미리 예열합니다.

분석된 각 지표별 점수에 가중치를 적용하여 최종 점수(final_score)를 계산합니다.

analyzer.py (분석 알고리즘의 두뇌 - The Algorithm Brain)
역할: 실제 인지 능력 분석을 수행하는 모든 핵심 로직과 AI 모델이 담겨있는 라이브러리 모듈입니다.

주요 기능:

SentenceTransformer 모델을 로드하고, 두 문장 간의 의미적 유사도를 계산하는 score_semantic_similarity 함수를 제공합니다. 이 함수는 화행 적절성과 회상성 점수 계산의 기반이 됩니다.

발화 속도와 머뭇거림(필러 단어)을 측정하여 유창성을 평가하는 score_fluency 함수를 제공합니다.

반복어 비율, 문법 완성도 등 규칙 기반의 점수 계산 함수들을 포함합니다.

run_full_analysis 함수를 통해 모든 분석 지표를 한번에 계산하고 결과를 딕셔너리 형태로 반환합니다.

custom_spell_checker.py (외부 맞춤법 검사기)
역할: 복잡한 설치 과정 없이 안정적인 맞춤법 검사 기능을 제공하는 독립 모듈입니다.

주요 기능:

requests 라이브러리를 사용하여 다음(Daum) 맞춤법 검사기 웹 서비스에 텍스트를 전송합니다.

응답받은 HTML 페이지를 파싱하여 맞춤법 오류의 개수를 추출하고 반환합니다.

5. 문제 해결 및 주의사항 (Troubleshooting & Precautions)
이 시스템을 개발하고 실행하는 과정에서 다음과 같은 문제들이 발생할 수 있습니다.

가. `UnicodeEncodeError` (문자 인코딩 오류)
   - 원인: 소스 코드의 print() 문에 포함된 특수 문자나 이모지(예: ✅, 🔥)가 Windows 기본 터미널(cp949)과 호환되지 않아 서버 시작 시 충돌을 일으킵니다.
   - 해결책: 개발 중, 특히 Windows 환경에서는 print() 문에 이모티콘이나 특수 유니코드 문자를 사용하지 않는 것을 권장합니다.

나. `Port already in use` / `Errno 10048` (포트 충돌 오류)
   - 원인: 서버가 비정상적으로 충돌하거나 종료될 경우, 이전에 실행되던 프로세스가 포트(예: 8000, 8081)를 계속 점유하고 있는 경우가 있습니다. 이로 인해 새로운 서버가 해당 포트를 사용하지 못해 실행이 실패합니다.
   - 해결책: 특정 포트를 사용하고 있는 프로세스를 찾아 강제로 종료해야 합니다.
     1. 포트 점유 프로세스 확인 (예: 8081 포트 확인):
        netstat -aon | findstr :8081
     2. 위 명령으로 찾은 PID(프로세스 ID)를 사용하여 프로세스 강제 종료 (예: PID가 12345인 경우):
        taskkill /F /PID 12345
